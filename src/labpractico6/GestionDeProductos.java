/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package labpractico6;

import java.util.Map;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author patri
 */
public class GestionDeProductos extends javax.swing.JInternalFrame {

    /**
     * Creates new form GestionDeProductos
     */
    public GestionDeProductos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comboCategoria = new javax.swing.JComboBox<>();
        txtCodigo = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtStock = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        btnSalir = new javax.swing.JButton();

        jLabel1.setText("Categoria");

        jLabel2.setText("Codigo");

        jLabel3.setText("Nombre");

        jLabel4.setText("Stock");

        comboCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Alimentos", "Perfumeria", "Electronica", "Limpieza" }));

        txtCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Codigo", "Stock", "Precio", "Categoria"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);

        jLabel5.setText("GESTOR DE PRODUCTO");

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        jLabel6.setText("Precio");

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboCategoria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtCodigo)
                            .addComponent(txtNombre)
                            .addComponent(txtStock)
                            .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(63, 63, 63)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnModificar)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 35, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(btnSalir)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBorrar))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModificar))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSalir)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        // Obtener y normalizar entradas de datos null, ya que se rompia al no ingresar nada...
        //!= null ?, sirve para la comprobación de datos no nulo, lo recomiendo para validaciones siempre..
        String categoria = comboCategoria.getSelectedItem() != null ? comboCategoria.getSelectedItem().toString().trim() : "";
        String nombre   = txtNombre.getText() != null ? txtNombre.getText().trim() : "";
        String codigoTxt= txtCodigo.getText() != null ? txtCodigo.getText().trim() : "";
        String stockTxt = txtStock.getText() != null ? txtStock.getText().trim() : "";
        String precioTxt= txtPrecio.getText() != null ? txtPrecio.getText().trim() : "";

        // Validacion para seleccion de categoria
        if (categoria.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Seleccione una categoría válida.", "Error", JOptionPane.ERROR_MESSAGE);
            comboCategoria.requestFocus();
            return;
        }
        
        if (nombre.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Ingrese el nombre del producto.", "Error", JOptionPane.ERROR_MESSAGE);
        txtNombre.requestFocus();
        return;
        }
        
        if (codigoTxt.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese el código del producto.", "Error", JOptionPane.ERROR_MESSAGE);
            txtCodigo.requestFocus();
            return;
        }
        
        if (stockTxt.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese el stock.", "Error", JOptionPane.ERROR_MESSAGE);
            txtStock.requestFocus();
            return;
        }
        
        if (precioTxt.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese el precio.", "Error", JOptionPane.ERROR_MESSAGE);
            txtPrecio.requestFocus();
            return;
    }
        // Normalizo el  formato del precio (acepta coma o punto) ya que los profes pueden ingresar numeros con comas o puntos
        precioTxt = precioTxt.replace(',', '.');
        int codigo;
        int stock;
        double precio;

        // Parseo y validaciones numéricas con su respectivo mensaje...
        try {
            codigo = Integer.parseInt(codigoTxt);
            if (codigo <= 0) {
                JOptionPane.showMessageDialog(this, "El código debe ser un número entero positivo.", "Error", JOptionPane.ERROR_MESSAGE);
                txtCodigo.requestFocus();
                return;
            }
        
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Código inválido. Ingrese un número entero (ej: 123).", "Error", JOptionPane.ERROR_MESSAGE);
            txtCodigo.requestFocus();
            return;
        }
        
        try {
            stock = Integer.parseInt(stockTxt);
            if (stock < 0) {
                JOptionPane.showMessageDialog(this, "El stock no puede ser negativo.", "Error", JOptionPane.ERROR_MESSAGE);
                txtStock.requestFocus();
                return;
            
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Stock inválido. Ingrese un número entero (ej: 10).", "Error", JOptionPane.ERROR_MESSAGE);
            txtStock.requestFocus();
            return;
        }
        
        try {
            precio = Double.parseDouble(precioTxt);
            if (precio < 0) {
                JOptionPane.showMessageDialog(this, "El precio no puede ser negativo.", "Error", JOptionPane.ERROR_MESSAGE);
                txtPrecio.requestFocus();
                return;
            }
        
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Precio inválido. Ingrese un número (ej: 123.45).", "Error", JOptionPane.ERROR_MESSAGE);
            txtPrecio.requestFocus();
            return;
        }

        // Para verificar existencia de código antes de agregar
        if (DeTodoSa.mercaderia.containsKey(codigo)) {
            JOptionPane.showMessageDialog(this, "El código ya existe.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            txtCodigo.requestFocus();
            return;
        }

        // Para intentar crear y agregar el producto
        try {
            Producto nuevo = new Producto(nombre, precio, stock, categoria);
            DeTodoSa.mercaderia.put(codigo, nuevo);
            
            String[] fila = {
                nombre,
                String.valueOf(codigo),
                String.valueOf(stock),
                String.format("%.2f", precio),
                categoria
            };
            modelo.addRow(fila);
            JOptionPane.showMessageDialog(this, "Producto agregado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            // Para limpiar campos después de agregar
            txtNombre.setText("");
            txtCodigo.setText("");
            txtStock.setText("");
            txtPrecio.setText("");
            comboCategoria.setSelectedIndex(0); // o -1 si no quieres seleccionar nada
        
        } catch (Exception ex) {
        // Capturo cualquier excepción inesperada y lo informo..
        JOptionPane.showMessageDialog(this, "Error al agregar el producto: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();

    }//GEN-LAST:event_btnAgregarActionPerformed
  }
    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
         DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
         try {
             int selectedRow = tabla.getSelectedRow();
             String codigoTxt;

            // Si hay una fila seleccionada, toma el código de la tabla................
            if (selectedRow != -1) {
                Object val = modelo.getValueAt(selectedRow, 1); // columna 1 = Codigo
                codigoTxt = val != null ? val.toString().trim() : "";
            } else {
                codigoTxt = txtCodigo.getText() != null ? txtCodigo.getText().trim() : "";
            }

             // Validación: para campo vacío, ya que se rompia antes...
             if (codigoTxt.isEmpty()) {
                 JOptionPane.showMessageDialog(this, "No hay código para borrar. Seleccione una fila o ingrese el código a borrar.", "Error", JOptionPane.ERROR_MESSAGE);
                 if (selectedRow == -1) {
                     txtCodigo.requestFocus();
                 } else {
                     tabla.requestFocus();
                 }
                 return;
             }
                
            // Parseo seguro del código para una mejor validación
            final int codigo;
            try {
                codigo = Integer.parseInt(codigoTxt);
                if (codigo <= 0) {
                    JOptionPane.showMessageDialog(this, "El código debe ser un número entero positivo.", "Error", JOptionPane.ERROR_MESSAGE);
                    txtCodigo.requestFocus();
                    return;
                }
            
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(this, "Código inválido. Ingrese un número entero (ej: 123).", "Error", JOptionPane.ERROR_MESSAGE);
                txtCodigo.requestFocus();
                return;
            }

            // Verificar existencia del producto...
            if (!DeTodoSa.mercaderia.containsKey(codigo)) {
                JOptionPane.showMessageDialog(this, "No existe un producto con el código indicado.", "Información", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            // Confirmación de borrado
            int confirm = JOptionPane.showConfirmDialog(this,
                "¿Está seguro que desea borrar el producto con código " + codigo + "?",
                "Confirmar borrado",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);

            if (confirm != JOptionPane.YES_OPTION) {
                return; // el usuario canceló
            }

            // Borro el mapa (sin iterar sobre el entrySet para evitar ConcurrentModificationException que me paso recien....
            DeTodoSa.mercaderia.remove(codigo);

            // Actualizo la tabla (con actualizarTabla() que reconstruye desde el mapa, usarla)
            // actualizarTabla();
           
            if (selectedRow != -1) {
                modelo.removeRow(selectedRow);
            } else {
           // Si no había selección, reconstruyo de nuevo la tabla desde el mapa para asegurar consistencia y no me cancele el anterior que cree como recien......
           actualizarTabla();
            }

            // Para limpiar campos y quitar selección
            txtCodigo.setText("");
            txtNombre.setText("");
            txtStock.setText("");
            txtPrecio.setText("");
            comboCategoria.setSelectedIndex(0);
            tabla.clearSelection();

            JOptionPane.showMessageDialog(this, "Producto borrado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            } catch (Exception ex) {
            // Para capturar cualquier excepción inesperada
                JOptionPane.showMessageDialog(this, "Ocurrió un error al borrar el producto: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
       int fila= tabla.rowAtPoint(evt.getPoint());
       String codigo= tabla.getValueAt(fila, 1).toString();
       String nombre=tabla.getValueAt(fila, 0).toString();
       String stock=tabla.getValueAt(fila, 2).toString();
       String precio=tabla.getValueAt(fila, 3).toString();
       String categoria= tabla.getValueAt(fila, 4).toString();
       txtNombre.setText(nombre);
       txtStock.setText(stock);
       txtCodigo.setText(codigo);
       txtPrecio.setText(precio);
       comboCategoria.setSelectedItem(categoria);
       
    }//GEN-LAST:event_tablaMouseClicked

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
    DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
    // Recordar utilizar siempre != null ? en validaciones, para controlar los datos vacios.
    
    String categoria = comboCategoria.getSelectedItem() != null ? comboCategoria.getSelectedItem().toString().trim() : "";
    String nombre   = txtNombre.getText() != null ? txtNombre.getText().trim() : "";
    String codigoTxt= txtCodigo.getText() != null ? txtCodigo.getText().trim() : "";
    String stockTxt = txtStock.getText() != null ? txtStock.getText().trim() : "";
    String precioTxt= txtPrecio.getText() != null ? txtPrecio.getText().trim() : "";

    
    if (categoria.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Seleccione una categoría válida.", "Error", JOptionPane.ERROR_MESSAGE);
        comboCategoria.requestFocus();
        return;
    }
    
    if (nombre.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Ingrese el nombre del producto.", "Error", JOptionPane.ERROR_MESSAGE);
        txtNombre.requestFocus();
        return;
    }
    
    if (codigoTxt.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Ingrese el código del producto.", "Error", JOptionPane.ERROR_MESSAGE);
        txtCodigo.requestFocus();
        return;
    }
    
    if (stockTxt.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Ingrese el stock.", "Error", JOptionPane.ERROR_MESSAGE);
        txtStock.requestFocus();
        return;
    }
    
    if (precioTxt.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Ingrese el precio.", "Error", JOptionPane.ERROR_MESSAGE);
        txtPrecio.requestFocus();
        return;
    }
    
    //Para coma/punto en precio
    precioTxt = precioTxt.replace(',', '.');
    
    int codigo, stock;
    double precio;

        // Parseo y validaciones numéricas
    try {
        codigo = Integer.parseInt(codigoTxt);
        if (codigo <= 0) {
            JOptionPane.showMessageDialog(this, "El código debe ser un número entero positivo.", "Error", JOptionPane.ERROR_MESSAGE);
            txtCodigo.requestFocus();
            return;
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Código inválido. Ingrese un número entero (ej: 123).", "Error", JOptionPane.ERROR_MESSAGE);
        txtCodigo.requestFocus();
        return;
    }

    try {
        stock = Integer.parseInt(stockTxt);
        if (stock < 0) {
            JOptionPane.showMessageDialog(this, "El stock no puede ser negativo.", "Error", JOptionPane.ERROR_MESSAGE);
            txtStock.requestFocus();
            return;
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Stock inválido. Ingrese un número entero (ej: 10).", "Error", JOptionPane.ERROR_MESSAGE);
        txtStock.requestFocus();
        return;
    }

    try {
        precio = Double.parseDouble(precioTxt);
        if (precio < 0) {
            JOptionPane.showMessageDialog(this, "El precio no puede ser negativo.", "Error", JOptionPane.ERROR_MESSAGE);
            txtPrecio.requestFocus();
            return;
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Precio inválido. Ingrese un número (ej: 123.45).", "Error", JOptionPane.ERROR_MESSAGE);
        txtPrecio.requestFocus();
        return;
    }

    int selectedRow = tabla.getSelectedRow();
    Integer originalCodigo = null;

    try {
        // Si hay fila seleccionada, obtener el código original de esa fila
        if (selectedRow != -1) {
            Object val = modelo.getValueAt(selectedRow, 1); // columna 1 = Codigo
            if (val != null) {
                try {
                    originalCodigo = Integer.parseInt(val.toString());
                } catch (NumberFormatException nfe) {
                    originalCodigo = null;
                }
            }
        }

        // Si no hay selección, intentar buscar una fila por el código ingresado
        if (selectedRow == -1) {
            for (int i = 0; i < modelo.getRowCount(); i++) {
                Object val = modelo.getValueAt(i, 1);
                if (val != null && val.toString().equals(String.valueOf(codigo))) {
                    selectedRow = i;
                    originalCodigo = codigo; // coincidente
                    break;
                }
            }
        }

            // Si no encontramos ninguna fila para modificar, avisar al usuario
        if (selectedRow == -1 && (originalCodigo == null || !DeTodoSa.mercaderia.containsKey(codigo))) {
            JOptionPane.showMessageDialog(this, "No hay ningún producto seleccionado ni existe un producto con ese código. Seleccione una fila o ingrese el código de un producto existente.", "Información", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

            // Si el usuario cambió el código y el nuevo código ya existe en mercaderia (y no es el mismo producto), impedir duplicado
        if (originalCodigo != null && codigo != originalCodigo && DeTodoSa.mercaderia.containsKey(codigo)) {
            JOptionPane.showMessageDialog(this, "El nuevo código ingresado ya corresponde a otro producto. Elija un código distinto.", "Error", JOptionPane.ERROR_MESSAGE);
            txtCodigo.requestFocus();
            return;
        }

        // Preparar el objeto Producto actualizado
        Producto actualizado = new Producto(nombre, precio, stock, categoria);

        // Actualizar el mapa DeTodoSa.mercaderia
        if (originalCodigo != null) {
            // Si se cambió el código, eliminar la entrada vieja y poner la nueva
            if (codigo != originalCodigo) {
                DeTodoSa.mercaderia.remove(originalCodigo);
                DeTodoSa.mercaderia.put(codigo, actualizado);
            } else {
                // mismo código -> reemplazar
                DeTodoSa.mercaderia.put(codigo, actualizado);
            }
        } else {
            // originalCodigo == null pero hay una fila detectada por código...  es por si falla el anterior if mas de todo...
            DeTodoSa.mercaderia.put(codigo, actualizado);
        }

        // Para actualizar la fila de la tabla (no agregar una nueva)
        modelo.setValueAt(nombre, selectedRow, 0); // Nombre
        modelo.setValueAt(String.valueOf(codigo), selectedRow, 1); // Codigo
        modelo.setValueAt(String.valueOf(stock), selectedRow, 2); // Stock
        modelo.setValueAt(String.format("%.2f", precio), selectedRow, 3); // Precio
        modelo.setValueAt(categoria, selectedRow, 4); // Categoria

        JOptionPane.showMessageDialog(this, "Producto modificado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        // Opcional: limpiar campos y quitar selección
        txtNombre.setText("");
        txtCodigo.setText("");
        txtStock.setText("");
        txtPrecio.setText("");
        comboCategoria.setSelectedIndex(0);
        tabla.clearSelection();

    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Ocurrió un error al modificar el producto: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
                              
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
       dispose();
    }//GEN-LAST:event_btnSalirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> comboCategoria;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtStock;
    // End of variables declaration//GEN-END:variables
public void actualizarTabla(){
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        modelo.setRowCount(0);
        for (Map.Entry<Integer, Producto> aux : DeTodoSa.mercaderia.entrySet()) {
            String nombre = aux.getValue().getNombre();
            String codigo = aux.getKey().toString();
            String stock = String.valueOf(aux.getValue().getStock());
            String categoria = aux.getValue().getCategoria();
            String precio = String.valueOf(aux.getValue().getPrecio());
            String[] fila = {
                nombre,
                codigo,
                stock,
                precio,
                categoria

            };
            modelo.addRow(fila);
        }
    }
}
